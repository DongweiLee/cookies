// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Test.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/THttpServer.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/async/TEvhttpClientChannel.h>
#include <event.h>
#include <string>
#include "boost/shared_ptr.hpp"
#include <thrift/Thrift.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/server/TServer.h>
#include <thrift/async/TAsyncChannel.h>
#include "boost/function.hpp"
#include "boost/bind.hpp"
#include <stdio.h>
#include <vector>
using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using std::string;
using std::vector;
using boost::shared_ptr;
using namespace apache::thrift::async;

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::uctest;

void my_ping_pong(TestCobClient* pclient)
{
	std::string pong;
	pclient->recv_pingpong(pong);
	printf("[%d] [%p] recv:%s\n", (int)time(NULL),pclient, pong.c_str());

	tcxx::function<void(TestCobClient* pclient)> cob = bind(&my_ping_pong,_1);
	pclient->pingpong(cob, "ping");
	printf("[%d] [%p] send ping\n", (int)time(NULL),pclient);
}

int main(int argc, char **argv) {
	try{
		event_base* evbase = event_base_new();

		vector<TestCobClient *> pclient_v;
		for(int i=0;i<1000;i++)
		{
			boost::shared_ptr<TAsyncChannel> channel(new TEvhttpClientChannel("127.0.0.1", "/", "127.0.0.1", 9093, evbase));
			TestCobClient * pclient=new TestCobClient(channel, new TBinaryProtocolFactory());
			tcxx::function<void(TestCobClient* pclient)> cob = bind(&my_ping_pong,_1);
			pclient->pingpong(cob, "ping");
			printf("[%d] [%p] send ping\n", (int)time(NULL),pclient);
			pclient_v.push_back(pclient);
		}
		
		event_base_dispatch(evbase);
		event_base_free(evbase);
	}

	catch(...)
	{
		printf("exception");
		return 1;
	}

	return 0;
};
